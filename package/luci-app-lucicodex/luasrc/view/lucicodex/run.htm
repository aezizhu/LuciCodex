<%+header%>

<h2 name="content"><%:Run LuciCodex%></h2>

<div class="cbi-map">
    <div class="cbi-section">
        <div class="cbi-section-descr">
            <%:Enter a natural language request and the AI will generate safe OpenWrt commands. Review the plan before executing.%>
        </div>
    </div>

    <div class="cbi-section">
        <div class="cbi-section-node">
            <div class="cbi-value">
                <label class="cbi-value-title" for="prompt"><%:Request%></label>
                <div class="cbi-value-field">
                    <textarea id="prompt" name="prompt" rows="4" style="width: 100%; max-width: 600px;" placeholder="Example: Show me the current network configuration"></textarea>
                </div>
            </div>

            <div class="cbi-value">
                <label class="cbi-value-title"><%:Options%></label>
                <div class="cbi-value-field">
                    <input type="checkbox" id="dry_run" name="dry_run" checked="checked" />
                    <label for="dry_run"><%:Dry Run (show commands without executing)%></label>
                </div>
            </div>

            <div class="cbi-value">
                <label class="cbi-value-title"></label>
                <div class="cbi-value-field">
                    <button class="cbi-button cbi-button-apply" onclick="generatePlan()"><%:Generate Plan%></button>
                    <button class="cbi-button cbi-button-reset" onclick="clearResults()"><%:Clear%></button>
                </div>
            </div>
        </div>
    </div>

    <div id="loading" style="display: none; margin: 20px 0;">
        <p><em><%:Generating plan...%></em></p>
    </div>

    <div id="error" style="display: none; margin: 20px 0; padding: 10px; background-color: #fee; border: 1px solid #fcc;">
        <strong><%:Error:%></strong> <span id="error-message"></span>
    </div>

    <div id="plan-section" style="display: none; margin: 20px 0;">
        <div class="cbi-section">
            <h3><%:Generated Plan%></h3>
            <div id="plan-summary" style="margin: 10px 0; padding: 10px; background-color: #f0f0f0;"></div>
            <div id="plan-commands"></div>
            <div id="plan-warnings" style="margin: 10px 0;"></div>
            
            <div style="margin: 20px 0;">
                <button class="cbi-button cbi-button-save" onclick="executePlan()" id="execute-button"><%:Execute Commands%></button>
            </div>
        </div>
    </div>

    <div id="result-section" style="display: none; margin: 20px 0;">
        <div class="cbi-section">
            <h3><%:Execution Result%></h3>
            <pre id="result-output" style="background-color: #f9f9f9; padding: 10px; border: 1px solid #ddd; overflow-x: auto;"></pre>
        </div>
    </div>
</div>

<script type="text/javascript">
function generatePlan() {
    var prompt = document.getElementById('prompt').value.trim();
    if (!prompt) {
        showError('Please enter a request');
        return;
    }

    document.getElementById('loading').style.display = 'block';
    document.getElementById('error').style.display = 'none';
    document.getElementById('plan-section').style.display = 'none';
    document.getElementById('result-section').style.display = 'none';

    var xhr = new XMLHttpRequest();
    xhr.open('POST', '<%=url("admin/system/lucicodex/plan")%>', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    
    xhr.onload = function() {
        document.getElementById('loading').style.display = 'none';
        
        if (xhr.status === 200) {
            try {
                var response = JSON.parse(xhr.responseText);
                if (response.ok && response.plan) {
                    displayPlan(response.plan);
                } else {
                    showError(response.error || 'Failed to generate plan');
                }
            } catch (e) {
                showError('Invalid response from server');
            }
        } else {
            try {
                var error = JSON.parse(xhr.responseText);
                showError(error.error || 'Request failed');
            } catch (e) {
                showError('Request failed with status ' + xhr.status);
            }
        }
    };
    
    xhr.onerror = function() {
        document.getElementById('loading').style.display = 'none';
        showError('Network error');
    };
    
    xhr.send(JSON.stringify({ prompt: prompt }));
}

function displayPlan(plan) {
    document.getElementById('plan-section').style.display = 'block';
    
    if (plan.summary) {
        document.getElementById('plan-summary').innerHTML = '<strong>Summary:</strong> ' + escapeHtml(plan.summary);
    } else {
        document.getElementById('plan-summary').innerHTML = '';
    }
    
    var commandsHtml = '<div style="margin: 10px 0;">';
    if (plan.commands && plan.commands.length > 0) {
        commandsHtml += '<strong>Commands (' + plan.commands.length + '):</strong><ul>';
        for (var i = 0; i < plan.commands.length; i++) {
            var cmd = plan.commands[i];
            var cmdText = cmd.command.join(' ');
            commandsHtml += '<li style="margin: 5px 0;">';
            commandsHtml += '<code style="background-color: #f0f0f0; padding: 2px 5px;">' + escapeHtml(cmdText) + '</code>';
            if (cmd.description) {
                commandsHtml += '<br/><em>' + escapeHtml(cmd.description) + '</em>';
            }
            if (cmd.needs_root) {
                commandsHtml += ' <span style="color: #c00;">(requires root)</span>';
            }
            commandsHtml += '</li>';
        }
        commandsHtml += '</ul>';
    } else {
        commandsHtml += '<p><em>No commands generated</em></p>';
    }
    commandsHtml += '</div>';
    document.getElementById('plan-commands').innerHTML = commandsHtml;
    
    if (plan.warnings && plan.warnings.length > 0) {
        var warningsHtml = '<div style="padding: 10px; background-color: #ffc; border: 1px solid #cc9;">';
        warningsHtml += '<strong>Warnings:</strong><ul>';
        for (var i = 0; i < plan.warnings.length; i++) {
            warningsHtml += '<li>' + escapeHtml(plan.warnings[i]) + '</li>';
        }
        warningsHtml += '</ul></div>';
        document.getElementById('plan-warnings').innerHTML = warningsHtml;
    } else {
        document.getElementById('plan-warnings').innerHTML = '';
    }
    
    var dryRun = document.getElementById('dry_run').checked;
    var executeButton = document.getElementById('execute-button');
    if (dryRun) {
        executeButton.style.display = 'none';
    } else {
        executeButton.style.display = 'inline-block';
    }
}

function executePlan() {
    var prompt = document.getElementById('prompt').value.trim();
    if (!prompt) {
        showError('Please enter a request');
        return;
    }

    if (!confirm('Are you sure you want to execute these commands on your router?')) {
        return;
    }

    document.getElementById('loading').style.display = 'block';
    document.getElementById('error').style.display = 'none';
    document.getElementById('result-section').style.display = 'none';

    var xhr = new XMLHttpRequest();
    xhr.open('POST', '<%=url("admin/system/lucicodex/execute")%>', true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    
    xhr.onload = function() {
        document.getElementById('loading').style.display = 'none';
        
        if (xhr.status === 200) {
            try {
                var response = JSON.parse(xhr.responseText);
                if (response.ok) {
                    displayResult(response.output || JSON.stringify(response.result, null, 2));
                } else {
                    showError(response.error || 'Execution failed');
                }
            } catch (e) {
                showError('Invalid response from server');
            }
        } else {
            try {
                var error = JSON.parse(xhr.responseText);
                showError(error.error || 'Request failed');
                if (error.output) {
                    displayResult(error.output);
                }
            } catch (e) {
                showError('Request failed with status ' + xhr.status);
            }
        }
    };
    
    xhr.onerror = function() {
        document.getElementById('loading').style.display = 'none';
        showError('Network error');
    };
    
    xhr.send(JSON.stringify({ 
        prompt: prompt,
        dry_run: false,
        timeout: 30
    }));
}

function displayResult(output) {
    document.getElementById('result-section').style.display = 'block';
    document.getElementById('result-output').textContent = output;
}

function showError(message) {
    document.getElementById('error').style.display = 'block';
    document.getElementById('error-message').textContent = message;
}

function clearResults() {
    document.getElementById('prompt').value = '';
    document.getElementById('error').style.display = 'none';
    document.getElementById('plan-section').style.display = 'none';
    document.getElementById('result-section').style.display = 'none';
}

function escapeHtml(text) {
    var div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}
</script>

<%+footer%>
